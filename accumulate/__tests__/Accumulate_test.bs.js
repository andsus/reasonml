// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Accumulate$Accumulate = require("../src/Accumulate.bs.js");

function square(x) {
  return Caml_int32.imul(x, x);
}

function reverse(x) {
  return x.split("").reverse().join("");
}

Jest.describe("Accumulate", (function (param) {
        Jest.test("[] Accumulate", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Accumulate$Accumulate.accumulate(square, /* [] */0)));
              }));
        Jest.test("square Accumulate", (function (param) {
                return Jest.Expect.toEqual(/* :: */[
                            1,
                            /* :: */[
                              4,
                              /* :: */[
                                9,
                                /* [] */0
                              ]
                            ]
                          ], Jest.Expect.expect(Accumulate$Accumulate.accumulate(square, /* :: */[
                                    1,
                                    /* :: */[
                                      2,
                                      /* :: */[
                                        3,
                                        /* [] */0
                                      ]
                                    ]
                                  ])));
              }));
        Jest.test("toUpper Accumulate", (function (param) {
                return Jest.Expect.toEqual(/* :: */[
                            "HELLO",
                            /* :: */[
                              "WORLD",
                              /* [] */0
                            ]
                          ], Jest.Expect.expect(Accumulate$Accumulate.accumulate($$String.uppercase_ascii, /* :: */[
                                    "hello",
                                    /* :: */[
                                      "world",
                                      /* [] */0
                                    ]
                                  ])));
              }));
        return Jest.test("reverse Accumulate", (function (param) {
                      return Jest.Expect.toEqual(/* :: */[
                                  "olleh",
                                  /* :: */[
                                    "dlrow",
                                    /* [] */0
                                  ]
                                ], Jest.Expect.expect(Accumulate$Accumulate.accumulate(reverse, /* :: */[
                                          "hello",
                                          /* :: */[
                                            "world",
                                            /* [] */0
                                          ]
                                        ])));
                    }));
      }));

exports.square = square;
exports.reverse = reverse;
/*  Not a pure module */
